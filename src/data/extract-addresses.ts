import { fileURLToPath } from 'url';
import { dirname } from 'path';
import * as fs from 'fs';
import * as zlib from 'zlib';
import * as readline from 'readline';
import * as path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Settings
const GZ_FILE = path.resolve(__dirname, '../../be-vlg-addresses.tsv.gz');
const OUT_FILE = path.resolve(__dirname, './streets.ts');
const TARGET_CITIES = [
  { city: 'Mendonk', postal: '9042' },
  { city: 'Sint-Kruis-Winkel', postal: '9042' },
  { city: 'Wachtebeke', postal: '9185' },
];

function isTarget(city: string, postal: string) {
  return TARGET_CITIES.some(
    (c) => c.city.toLowerCase() === city.toLowerCase() && c.postal === postal
  );
}

const addresses: Record<string, Record<string, Set<number>>> = {};
for (const c of TARGET_CITIES) {
  addresses[c.city] = {};
}

async function processAddresses() {
  const gunzip = zlib.createGunzip();
  const fileStream = fs.createReadStream(GZ_FILE);
  const rl = readline.createInterface({
    input: fileStream.pipe(gunzip),
    crlfDelay: Infinity,
  });

  let header: string[] = [];
  let lineCount = 0;
  for await (const line of rl) {
    lineCount++;
    if (lineCount === 1) {
      header = line.split('\t');
      continue;
    }
    const cols = line.split('\t');
    const obj: Record<string, string> = {};
    header.forEach((h, i) => (obj[h] = cols[i]));
    const { Gemeente, Straatnaam, Huisnummer, Postcode } = obj;
    if (!Gemeente || !Straatnaam || !Huisnummer || !Postcode) continue;
    if (!isTarget(Gemeente, Postcode)) continue;
    const city = Gemeente;
    const street = Straatnaam;
    const nr = parseInt(Huisnummer, 10);
    if (!addresses[city][street]) addresses[city][street] = new Set();
    addresses[city][street].add(nr);
  }

  // Convert sets to arrays and sort
  const out: Record<string, Record<string, number[]>> = {};
  for (const city of Object.keys(addresses)) {
    out[city] = {};
    for (const street of Object.keys(addresses[city])) {
      out[city][street] = Array.from(addresses[city][street]).sort((a, b) => a - b);
    }
  }

  // Write to TypeScript file
  const ts = `// Auto-generated by extract-addresses.ts\nexport const streets: Record<string, Record<string, number[]>> = ${JSON.stringify(
    out,
    null,
    2
  )};\n`;
  fs.writeFileSync(OUT_FILE, ts, 'utf8');
  console.log(`Wrote ${OUT_FILE}`);
}

processAddresses().catch((err) => {
  console.error(err);
  process.exit(1);
}); 